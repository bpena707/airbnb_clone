// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// this scehma is all of our basic data

// user model with an id of type string mapping the id to the objectId due 
// to mongodb use which will be used for every model the database 
// some of attributes are optional becuase when using google or github auth they will not be required
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId //every model inside of prisma must contain an id 
  name String?
  email String? @unique 
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId //push an array of ids when listing is favorited 

  //relations to other models 
  accounts Account[]  //user can have many accounts
  listing Listing[]
  reservations Reservation[]

}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId 
  type String 
  provider String 
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  // relation between the user and the account using the fields userid by referencing the id in the user model 
  // on delete in cascade to delete all account information when user deletes account  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // unique combination of fields 
  @@unique([provider, providerAccountId])
}

model Listing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String 
  description String
  imageSrc String //required by cloudinary cvn 
  createdAt DateTime @default(now())
  category String
  roomCount Int
  bathroomCount Int 
  guestCount Int
  locationValue String 
  userId String @db.ObjectId
  price Int 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[] //has an array of reservations for multiple reservations 

}

model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime 
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

}